version: '2.1'
services:
  database:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root"
      POSTGRES_DB:       "songservice_db"
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  configserver:
    image: sparser/configserver:0.0.1-SNAPSHOT
    ports:
       - "8071:8071"
    environment:
      ENCRYPT_KEY: "fje83Ki8403Iod87dne7Yjsl3THueh48jfuO9j4U2hf64Lo"
    networks:
      backend:
        aliases:
          - "configserver"
  eurekaserver:
    image: sparser/eurekaserver:0.0.1-SNAPSHOT
    ports:
      - "8070:8070"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "eurekaserver"
  gatewayserver:
    image: sparser/gatewayserver:0.0.1-SNAPSHOT
    ports:
      - "8072:8072"
    environment:
      PROFILE: "default"
      SERVER_PORT: "8072"
      CONFIGSERVER_URI: "http://configserver:8071"
      EUREKASERVER_URI: "http://eurekaserver:8070/eureka/"
      EUREKASERVER_PORT: "8070"
      CONFIGSERVER_PORT: "8071"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
      eurekaserver:
        condition: service_started
    networks:
      backend:
        aliases:
          - "gateway"
  songservice:
    image: sparser/song-service:0.0.1-SNAPSHOT
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT:   "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY:       "IMSYMMETRIC"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_started
    ports:
      - "8080:8080"
    networks:
      - backend
  resourceservicedb:
    image: postgres:latest
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root"
      POSTGRES_DB:       "resourceservicedb"
    networks:
      backend:
        aliases:
          - "resourceservicedb"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  resourceservice:
    image: sparser/resource-service:0.0.1-SNAPSHOT
    environment:
      PROFILE: "dev"
      CONFIGSERVER_URI: "http://configserver:8071"
      CONFIGSERVER_PORT: "8071"
      DATABASESERVER_PORT: "5432"
      ENCRYPT_KEY: "IMSYMMETRIC"
    depends_on:
      resourceservicedb:
        condition: service_healthy
      configserver:
        condition: service_started
      localstack:
        condition: service_started
    ports:
      - "8081:8081"
    networks:
      - backend
      - localstack
  localstack:
    image: localstack/localstack
    container_name: awslocal
    hostname: localhost
    environment:
      DOCKER_HOST: unix:///var/run/docker.sock
      HOST_TMP_FOLDER: /tmp/localstack
      HOSTNAME_EXTERNAL: localhost
    ports:
      - "4566:4566"
      - "8055:8080"
    volumes:
      - "./.localstack:/tmp/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"


networks:
  backend:
    driver: bridge
  localstack: